// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GeocodeData, GeocodeErrors, GeocodeResponses, InitialData, InitialErrors, InitialResponses, LevelsData, LevelsErrors, LevelsResponses, OneToAllData, OneToAllErrors, OneToAllResponses, OneToManyData, OneToManyResponses, PlanData, PlanErrors, PlanResponses, ReverseGeocodeData, ReverseGeocodeErrors, ReverseGeocodeResponses, StopsData, StopsErrors, StopsResponses, StoptimesData, StoptimesErrors, StoptimesResponses, TransfersData, TransfersResponses, TripData, TripErrors, TripResponses, TripsData, TripsErrors, TripsResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Computes optimal connections from one place to another.
 */
export const plan = <ThrowOnError extends boolean = false>(options: Options<PlanData, ThrowOnError>) => {
    return (options.client ?? client).get<PlanResponses, PlanErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/api/v1/plan',
        ...options
    });
};

/**
 * Street routing from one to many places or many to one.
 * The order in the response array corresponds to the order of coordinates of the \`many\` parameter in the query.
 *
 */
export const oneToMany = <ThrowOnError extends boolean = false>(options: Options<OneToManyData, ThrowOnError>) => {
    return (options.client ?? client).get<OneToManyResponses, unknown, ThrowOnError>({
        url: '/api/v1/one-to-many',
        ...options
    });
};

/**
 * Computes all reachable locations from a given stop within a set duration.
 * Each result entry will contain the fastest travel duration and the number of connections used.
 *
 */
export const oneToAll = <ThrowOnError extends boolean = false>(options: Options<OneToAllData, ThrowOnError>) => {
    return (options.client ?? client).get<OneToAllResponses, OneToAllErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/api/v1/one-to-all',
        ...options
    });
};

/**
 * Translate coordinates to the closest address(es)/places/stops.
 */
export const reverseGeocode = <ThrowOnError extends boolean = false>(options: Options<ReverseGeocodeData, ThrowOnError>) => {
    return (options.client ?? client).get<ReverseGeocodeResponses, ReverseGeocodeErrors, ThrowOnError>({
        url: '/api/v1/reverse-geocode',
        ...options
    });
};

/**
 * Autocompletion & geocoding that resolves user input addresses including coordinates
 */
export const geocode = <ThrowOnError extends boolean = false>(options: Options<GeocodeData, ThrowOnError>) => {
    return (options.client ?? client).get<GeocodeResponses, GeocodeErrors, ThrowOnError>({
        url: '/api/v1/geocode',
        ...options
    });
};

/**
 * Get a trip as itinerary
 */
export const trip = <ThrowOnError extends boolean = false>(options: Options<TripData, ThrowOnError>) => {
    return (options.client ?? client).get<TripResponses, TripErrors, ThrowOnError>({
        url: '/api/v1/trip',
        ...options
    });
};

/**
 * Get the next N departures or arrivals of a stop sorted by time
 */
export const stoptimes = <ThrowOnError extends boolean = false>(options: Options<StoptimesData, ThrowOnError>) => {
    return (options.client ?? client).get<StoptimesResponses, StoptimesErrors, ThrowOnError>({
        url: '/api/v1/stoptimes',
        ...options
    });
};

/**
 * Given a area frame (box defined by top right and bottom left corner) and a time frame,
 * it returns all trips and their respective shapes that operate in this area + time frame.
 * Trips are filtered by zoom level. On low zoom levels, only long distance trains will be shown
 * while on high zoom levels, also metros, buses and trams will be returned.
 *
 */
export const trips = <ThrowOnError extends boolean = false>(options: Options<TripsData, ThrowOnError>) => {
    return (options.client ?? client).get<TripsResponses, TripsErrors, ThrowOnError>({
        url: '/api/v1/map/trips',
        ...options
    });
};

/**
 * initial location to view the map at after loading based on where public transport should be visible
 */
export const initial = <ThrowOnError extends boolean = false>(options?: Options<InitialData, ThrowOnError>) => {
    return (options?.client ?? client).get<InitialResponses, InitialErrors, ThrowOnError>({
        url: '/api/v1/map/initial',
        ...options
    });
};

/**
 * Get all stops for a map section
 */
export const stops = <ThrowOnError extends boolean = false>(options: Options<StopsData, ThrowOnError>) => {
    return (options.client ?? client).get<StopsResponses, StopsErrors, ThrowOnError>({
        url: '/api/v1/map/stops',
        ...options
    });
};

/**
 * Get all available levels for a map section
 */
export const levels = <ThrowOnError extends boolean = false>(options: Options<LevelsData, ThrowOnError>) => {
    return (options.client ?? client).get<LevelsResponses, LevelsErrors, ThrowOnError>({
        url: '/api/v1/map/levels',
        ...options
    });
};

/**
 * Prints all transfers of a timetable location (track, bus stop, etc.)
 */
export const transfers = <ThrowOnError extends boolean = false>(options: Options<TransfersData, ThrowOnError>) => {
    return (options.client ?? client).get<TransfersResponses, unknown, ThrowOnError>({
        url: '/api/debug/transfers',
        ...options
    });
};
